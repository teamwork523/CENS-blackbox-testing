#!/usr/bin/python

import sys
from optparse import OptionParser
# import all the API testing file
import src.authToken as authToken
import src.userRead as userRead
import src.userInfoRead as userInfoRead
import src.xmlSchema as xmlSchema
import src.campCret as campCret
import src.campDel as campDel
import src.campUp as campUp

# write to standard file
# report is the succ/err report list generated by each API
def write_report_to_file(report, file_path, mode):
    # mode = 'w': write to a file
    # mode = 'a': append to a file
    try:
        f = open(file_path, mode)
        for x in report:
            f.write(x + '\n')
        f.close
    except IOError as (errno, strerror):
        print "I/O error({0}): {1}".format(errno, strerror)

def main():
    usage_msg = "%prog [OPTION] ... arg1, arg2 ...\n\n" +\
                "Perform black box testing on AndWellness or Mobilizing server."
    version_msg = "%prog 2.6"
    parser = OptionParser(version=version_msg, usage=usage_msg)
    
    # TODO: add more options if needed
    parser.add_option("--api", action="store", dest="API_NAME", default="all",
                      help="""Choose a specific API to test. By default, all those APIs will be tested.
Argument must from {auth_token, user_read, user_info_read, xml, camp_cret, camp_del, camp_up, all}""")
    parser.add_option("-f", "--file",
                      action="store", dest="FILE", default="report.log",
                      help = "Print the output to a file with filename FILE. By default, print to ./report.log")
    parser.add_option("-p", "--print",
                      action="store", dest="PRINT_MODE", default="all",
                      help = """Choose to print to screen or save the result to a log file.
Argument must from {std, file, all, none}""")
    parser.add_option("-r", "--result",
                      action="store", dest="RESULT", default="all",
                      help = """Choose to print or save success message or print or save error message.
Argument must from {succ, err, all, none}""")
    parser.add_option("-s", "--server",
                      action="store", dest="SERVER", default="and",
                      help = """Choose to run on AndWellness server or Mobilizing server.
Argument must from {and, mob}""")   
    options, args = parser.parse_args(sys.argv[1:])
    
    
    
    
if __name__ == "__main__":
    main()
